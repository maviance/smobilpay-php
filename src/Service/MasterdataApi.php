<?php
/**
 * MasterdataApi
 * PHP version 5
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Smobilpay S3P API
 *
 * Smobilpay Third Party API FOR PAYMENT COLLECTIONS
 *
 * OpenAPI spec version: 3.0.4
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Maviance\S3PApiClient\Service;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Maviance\S3PApiClient\ApiException;
use Maviance\S3PApiClient\Configuration;
use Maviance\S3PApiClient\HeaderSelector;
use Maviance\S3PApiClient\ObjectSerializer;

/**
 * MasterdataApi Class Doc Comment
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MasterdataApi
{
    /** @var ClientInterface */
    protected $client;

    /** @var Configuration */
    protected $config;

    /** @var HeaderSelector */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /** @return Configuration */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cashinGet
     *
     * Retrieve available cashin packages
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter cashin packages for only the selected service (optional)
     *
     * @throws \Maviance\S3PApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Maviance\S3PApiClient\Model\Cashin[]
     */
    public function cashinGet($xApiVersion, $serviceid = null)
    {
        [$response] = $this->cashinGetWithHttpInfo($xApiVersion, $serviceid);

        return $response;
    }

    /**
     * Operation cashinGetWithHttpInfo
     *
     * Retrieve available cashin packages
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter cashin packages for only the selected service (optional)
     *
     * @throws \Maviance\S3PApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Maviance\S3PApiClient\Model\Cashin[], HTTP status code, HTTP response headers (array of strings)
     */
    public function cashinGetWithHttpInfo($xApiVersion, $serviceid = null)
    {
        $returnType = '\Maviance\S3PApiClient\Model\Cashin[]';
        $request = $this->cashinGetRequest($xApiVersion, $serviceid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maviance\S3PApiClient\Model\Cashin[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maviance\S3PApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cashinGetAsync
     *
     * Retrieve available cashin packages
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter cashin packages for only the selected service (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashinGetAsync($xApiVersion, $serviceid = null)
    {
        return $this->cashinGetAsyncWithHttpInfo($xApiVersion, $serviceid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cashinGetAsyncWithHttpInfo
     *
     * Retrieve available cashin packages
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter cashin packages for only the selected service (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashinGetAsyncWithHttpInfo($xApiVersion, $serviceid = null)
    {
        $returnType = '\Maviance\S3PApiClient\Model\Cashin[]';
        $request = $this->cashinGetRequest($xApiVersion, $serviceid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation cashoutGet
     *
     * Retrieves available cashout packages
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter cashout packages for only the selected service (optional)
     *
     * @throws \Maviance\S3PApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Maviance\S3PApiClient\Model\Cashout[]
     */
    public function cashoutGet($xApiVersion, $serviceid = null)
    {
        [$response] = $this->cashoutGetWithHttpInfo($xApiVersion, $serviceid);

        return $response;
    }

    /**
     * Operation cashoutGetWithHttpInfo
     *
     * Retrieves available cashout packages
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter cashout packages for only the selected service (optional)
     *
     * @throws \Maviance\S3PApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Maviance\S3PApiClient\Model\Cashout[], HTTP status code, HTTP response headers (array of strings)
     */
    public function cashoutGetWithHttpInfo($xApiVersion, $serviceid = null)
    {
        $returnType = '\Maviance\S3PApiClient\Model\Cashout[]';
        $request = $this->cashoutGetRequest($xApiVersion, $serviceid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maviance\S3PApiClient\Model\Cashout[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maviance\S3PApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cashoutGetAsync
     *
     * Retrieves available cashout packages
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter cashout packages for only the selected service (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashoutGetAsync($xApiVersion, $serviceid = null)
    {
        return $this->cashoutGetAsyncWithHttpInfo($xApiVersion, $serviceid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cashoutGetAsyncWithHttpInfo
     *
     * Retrieves available cashout packages
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter cashout packages for only the selected service (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashoutGetAsyncWithHttpInfo($xApiVersion, $serviceid = null)
    {
        $returnType = '\Maviance\S3PApiClient\Model\Cashout[]';
        $request = $this->cashoutGetRequest($xApiVersion, $serviceid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation merchantGet
     *
     * Retrieve list of merchants supported by the system.
     *
     * @param string $xApiVersion api version info (required)
     *
     * @throws \Maviance\S3PApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Maviance\S3PApiClient\Model\Merchant[]
     */
    public function merchantGet($xApiVersion)
    {
        [$response] = $this->merchantGetWithHttpInfo($xApiVersion);

        return $response;
    }

    /**
     * Operation merchantGetWithHttpInfo
     *
     * Retrieve list of merchants supported by the system.
     *
     * @param string $xApiVersion api version info (required)
     *
     * @throws \Maviance\S3PApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Maviance\S3PApiClient\Model\Merchant[], HTTP status code, HTTP response headers (array of strings)
     */
    public function merchantGetWithHttpInfo($xApiVersion)
    {
        $returnType = '\Maviance\S3PApiClient\Model\Merchant[]';
        $request = $this->merchantGetRequest($xApiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maviance\S3PApiClient\Model\Merchant[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maviance\S3PApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation merchantGetAsync
     *
     * Retrieve list of merchants supported by the system.
     *
     * @param string $xApiVersion api version info (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function merchantGetAsync($xApiVersion)
    {
        return $this->merchantGetAsyncWithHttpInfo($xApiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation merchantGetAsyncWithHttpInfo
     *
     * Retrieve list of merchants supported by the system.
     *
     * @param string $xApiVersion api version info (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function merchantGetAsyncWithHttpInfo($xApiVersion)
    {
        $returnType = '\Maviance\S3PApiClient\Model\Merchant[]';
        $request = $this->merchantGetRequest($xApiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation productGet
     *
     * Retrieve list of available products
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter products to only the selected service (optional)
     *
     * @throws \Maviance\S3PApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Maviance\S3PApiClient\Model\Product[]
     */
    public function productGet($xApiVersion, $serviceid = null)
    {
        [$response] = $this->productGetWithHttpInfo($xApiVersion, $serviceid);

        return $response;
    }

    /**
     * Operation productGetWithHttpInfo
     *
     * Retrieve list of available products
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter products to only the selected service (optional)
     *
     * @throws \Maviance\S3PApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Maviance\S3PApiClient\Model\Product[], HTTP status code, HTTP response headers (array of strings)
     */
    public function productGetWithHttpInfo($xApiVersion, $serviceid = null)
    {
        $returnType = '\Maviance\S3PApiClient\Model\Product[]';
        $request = $this->productGetRequest($xApiVersion, $serviceid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maviance\S3PApiClient\Model\Product[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maviance\S3PApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productGetAsync
     *
     * Retrieve list of available products
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter products to only the selected service (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetAsync($xApiVersion, $serviceid = null)
    {
        return $this->productGetAsyncWithHttpInfo($xApiVersion, $serviceid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productGetAsyncWithHttpInfo
     *
     * Retrieve list of available products
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter products to only the selected service (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetAsyncWithHttpInfo($xApiVersion, $serviceid = null)
    {
        $returnType = '\Maviance\S3PApiClient\Model\Product[]';
        $request = $this->productGetRequest($xApiVersion, $serviceid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation serviceGet
     *
     * Retrieve list of services supported by the system.
     *
     * @param string $xApiVersion api version info (required)
     *
     * @throws \Maviance\S3PApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Maviance\S3PApiClient\Model\Service[]
     */
    public function serviceGet($xApiVersion)
    {
        [$response] = $this->serviceGetWithHttpInfo($xApiVersion);

        return $response;
    }

    /**
     * Operation serviceGetWithHttpInfo
     *
     * Retrieve list of services supported by the system.
     *
     * @param string $xApiVersion api version info (required)
     *
     * @throws \Maviance\S3PApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Maviance\S3PApiClient\Model\Service[], HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceGetWithHttpInfo($xApiVersion)
    {
        $returnType = '\Maviance\S3PApiClient\Model\Service[]';
        $request = $this->serviceGetRequest($xApiVersion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maviance\S3PApiClient\Model\Service[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maviance\S3PApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceGetAsync
     *
     * Retrieve list of services supported by the system.
     *
     * @param string $xApiVersion api version info (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceGetAsync($xApiVersion)
    {
        return $this->serviceGetAsyncWithHttpInfo($xApiVersion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceGetAsyncWithHttpInfo
     *
     * Retrieve list of services supported by the system.
     *
     * @param string $xApiVersion api version info (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceGetAsyncWithHttpInfo($xApiVersion)
    {
        $returnType = '\Maviance\S3PApiClient\Model\Service[]';
        $request = $this->serviceGetRequest($xApiVersion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation serviceIdGet
     *
     * Retrieve single service
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $id          Unique  service Identifier. (required)
     *
     * @throws \Maviance\S3PApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Maviance\S3PApiClient\Model\Service
     */
    public function serviceIdGet($xApiVersion, $id)
    {
        [$response] = $this->serviceIdGetWithHttpInfo($xApiVersion, $id);

        return $response;
    }

    /**
     * Operation serviceIdGetWithHttpInfo
     *
     * Retrieve single service
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $id          Unique  service Identifier. (required)
     *
     * @throws \Maviance\S3PApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Maviance\S3PApiClient\Model\Service, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceIdGetWithHttpInfo($xApiVersion, $id)
    {
        $returnType = '\Maviance\S3PApiClient\Model\Service';
        $request = $this->serviceIdGetRequest($xApiVersion, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maviance\S3PApiClient\Model\Service',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maviance\S3PApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceIdGetAsync
     *
     * Retrieve single service
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $id          Unique  service Identifier. (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceIdGetAsync($xApiVersion, $id)
    {
        return $this->serviceIdGetAsyncWithHttpInfo($xApiVersion, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceIdGetAsyncWithHttpInfo
     *
     * Retrieve single service
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $id          Unique  service Identifier. (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceIdGetAsyncWithHttpInfo($xApiVersion, $id)
    {
        $returnType = '\Maviance\S3PApiClient\Model\Service';
        $request = $this->serviceIdGetRequest($xApiVersion, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation topupGet
     *
     * Retrieve available topup packages
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter topups to only the selected service (optional)
     *
     * @throws \Maviance\S3PApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Maviance\S3PApiClient\Model\Topup[]
     */
    public function topupGet($xApiVersion, $serviceid = null)
    {
        [$response] = $this->topupGetWithHttpInfo($xApiVersion, $serviceid);

        return $response;
    }

    /**
     * Operation topupGetWithHttpInfo
     *
     * Retrieve available topup packages
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter topups to only the selected service (optional)
     *
     * @throws \Maviance\S3PApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Maviance\S3PApiClient\Model\Topup[], HTTP status code, HTTP response headers (array of strings)
     */
    public function topupGetWithHttpInfo($xApiVersion, $serviceid = null)
    {
        $returnType = '\Maviance\S3PApiClient\Model\Topup[]';
        $request = $this->topupGetRequest($xApiVersion, $serviceid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maviance\S3PApiClient\Model\Topup[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maviance\S3PApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation topupGetAsync
     *
     * Retrieve available topup packages
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter topups to only the selected service (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function topupGetAsync($xApiVersion, $serviceid = null)
    {
        return $this->topupGetAsyncWithHttpInfo($xApiVersion, $serviceid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation topupGetAsyncWithHttpInfo
     *
     * Retrieve available topup packages
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter topups to only the selected service (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function topupGetAsyncWithHttpInfo($xApiVersion, $serviceid = null)
    {
        $returnType = '\Maviance\S3PApiClient\Model\Topup[]';
        $request = $this->topupGetRequest($xApiVersion, $serviceid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation voucherGet
     *
     * Retrieve list of available vouchers to purchase
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter products to only the selected service (optional)
     *
     * @throws \Maviance\S3PApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Maviance\S3PApiClient\Model\Product[]
     */
    public function voucherGet($xApiVersion, $serviceid = null)
    {
        [$response] = $this->voucherGetWithHttpInfo($xApiVersion, $serviceid);

        return $response;
    }

    /**
     * Operation voucherGetWithHttpInfo
     *
     * Retrieve list of available vouchers to purchase
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter products to only the selected service (optional)
     *
     * @throws \Maviance\S3PApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Maviance\S3PApiClient\Model\Product[], HTTP status code, HTTP response headers (array of strings)
     */
    public function voucherGetWithHttpInfo($xApiVersion, $serviceid = null)
    {
        $returnType = '\Maviance\S3PApiClient\Model\Product[]';
        $request = $this->voucherGetRequest($xApiVersion, $serviceid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maviance\S3PApiClient\Model\Product[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Maviance\S3PApiClient\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation voucherGetAsync
     *
     * Retrieve list of available vouchers to purchase
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter products to only the selected service (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voucherGetAsync($xApiVersion, $serviceid = null)
    {
        return $this->voucherGetAsyncWithHttpInfo($xApiVersion, $serviceid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation voucherGetAsyncWithHttpInfo
     *
     * Retrieve list of available vouchers to purchase
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter products to only the selected service (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voucherGetAsyncWithHttpInfo($xApiVersion, $serviceid = null)
    {
        $returnType = '\Maviance\S3PApiClient\Model\Product[]';
        $request = $this->voucherGetRequest($xApiVersion, $serviceid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cashinGet'
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter cashin packages for only the selected service (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cashinGetRequest($xApiVersion, $serviceid = null)
    {
        // verify the required parameter 'xApiVersion' is set
        if ($xApiVersion === null || (is_array($xApiVersion) && count($xApiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xApiVersion when calling cashinGet'
            );
        }

        $resourcePath = '/cashin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($serviceid !== null) {
            $queryParams['serviceid'] = ObjectSerializer::toQueryValue($serviceid, null);
        }
        // header params
        if ($xApiVersion !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($xApiVersion);
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils\jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils\jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = http_build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = http_build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'cashoutGet'
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter cashout packages for only the selected service (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cashoutGetRequest($xApiVersion, $serviceid = null)
    {
        // verify the required parameter 'xApiVersion' is set
        if ($xApiVersion === null || (is_array($xApiVersion) && count($xApiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xApiVersion when calling cashoutGet'
            );
        }

        $resourcePath = '/cashout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($serviceid !== null) {
            $queryParams['serviceid'] = ObjectSerializer::toQueryValue($serviceid, null);
        }
        // header params
        if ($xApiVersion !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($xApiVersion);
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils\jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils\jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = http_build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = http_build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'merchantGet'
     *
     * @param string $xApiVersion api version info (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function merchantGetRequest($xApiVersion)
    {
        // verify the required parameter 'xApiVersion' is set
        if ($xApiVersion === null || (is_array($xApiVersion) && count($xApiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xApiVersion when calling merchantGet'
            );
        }

        $resourcePath = '/merchant';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xApiVersion !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($xApiVersion);
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils\jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils\jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = http_build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = http_build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'productGet'
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter products to only the selected service (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productGetRequest($xApiVersion, $serviceid = null)
    {
        // verify the required parameter 'xApiVersion' is set
        if ($xApiVersion === null || (is_array($xApiVersion) && count($xApiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xApiVersion when calling productGet'
            );
        }

        $resourcePath = '/product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($serviceid !== null) {
            $queryParams['serviceid'] = ObjectSerializer::toQueryValue($serviceid, null);
        }
        // header params
        if ($xApiVersion !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($xApiVersion);
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils\jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils\jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = http_build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = http_build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'serviceGet'
     *
     * @param string $xApiVersion api version info (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serviceGetRequest($xApiVersion)
    {
        // verify the required parameter 'xApiVersion' is set
        if ($xApiVersion === null || (is_array($xApiVersion) && count($xApiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xApiVersion when calling serviceGet'
            );
        }

        $resourcePath = '/service';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xApiVersion !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($xApiVersion);
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils\jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils\jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = http_build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = http_build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'serviceIdGet'
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $id          Unique  service Identifier. (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serviceIdGetRequest($xApiVersion, $id)
    {
        // verify the required parameter 'xApiVersion' is set
        if ($xApiVersion === null || (is_array($xApiVersion) && count($xApiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xApiVersion when calling serviceIdGet'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling serviceIdGet'
            );
        }

        $resourcePath = '/service/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xApiVersion !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($xApiVersion);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils\jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils\jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = http_build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = http_build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'topupGet'
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter topups to only the selected service (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function topupGetRequest($xApiVersion, $serviceid = null)
    {
        // verify the required parameter 'xApiVersion' is set
        if ($xApiVersion === null || (is_array($xApiVersion) && count($xApiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xApiVersion when calling topupGet'
            );
        }

        $resourcePath = '/topup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($serviceid !== null) {
            $queryParams['serviceid'] = ObjectSerializer::toQueryValue($serviceid, null);
        }
        // header params
        if ($xApiVersion !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($xApiVersion);
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils\jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils\jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = http_build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = http_build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'voucherGet'
     *
     * @param string $xApiVersion api version info (required)
     * @param int    $serviceid   Filter products to only the selected service (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function voucherGetRequest($xApiVersion, $serviceid = null)
    {
        // verify the required parameter 'xApiVersion' is set
        if ($xApiVersion === null || (is_array($xApiVersion) && count($xApiVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xApiVersion when calling voucherGet'
            );
        }

        $resourcePath = '/voucher';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($serviceid !== null) {
            $queryParams['serviceid'] = ObjectSerializer::toQueryValue($serviceid, null);
        }
        // header params
        if ($xApiVersion !== null) {
            $headerParams['x-api-version'] = ObjectSerializer::toHeaderValue($xApiVersion);
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils\jsonEncode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\Utils\jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = http_build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = http_build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
